-- Script para crear la tabla de detalles de pago
-- Este script debe ejecutarse en Supabase

-- Crear tabla para detalles de pago
CREATE TABLE IF NOT EXISTS payment_details (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    transaction_id VARCHAR(100) UNIQUE NOT NULL,
    payment_method VARCHAR(20) NOT NULL CHECK (payment_method IN ('credit_card', 'debit_card', 'pix', 'boleto')),
    payment_data JSONB NOT NULL DEFAULT '{}',
    status VARCHAR(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'approved', 'failed', 'cancelled', 'refunded')),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Crear índices para mejorar performance
CREATE INDEX IF NOT EXISTS idx_payment_details_order_id ON payment_details(order_id);
CREATE INDEX IF NOT EXISTS idx_payment_details_transaction_id ON payment_details(transaction_id);
CREATE INDEX IF NOT EXISTS idx_payment_details_status ON payment_details(status);
CREATE INDEX IF NOT EXISTS idx_payment_details_payment_method ON payment_details(payment_method);

-- Agregar campos adicionales a la tabla orders si no existen
DO $$ 
BEGIN
    -- Agregar tracking_number si no existe
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'tracking_number') THEN
        ALTER TABLE orders ADD COLUMN tracking_number VARCHAR(100);
    END IF;
    
    -- Agregar shipping_company si no existe
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'shipping_company') THEN
        ALTER TABLE orders ADD COLUMN shipping_company VARCHAR(100);
    END IF;
    
    -- Agregar admin_notes si no existe
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'orders' AND column_name = 'admin_notes') THEN
        ALTER TABLE orders ADD COLUMN admin_notes TEXT;
    END IF;
END $$;

-- Crear función para actualizar updated_at automáticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Crear trigger para payment_details
DROP TRIGGER IF EXISTS update_payment_details_updated_at ON payment_details;
CREATE TRIGGER update_payment_details_updated_at
    BEFORE UPDATE ON payment_details
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Política de seguridad para payment_details (RLS - Row Level Security)
ALTER TABLE payment_details ENABLE ROW LEVEL SECURITY;

-- Política para que solo los admins puedan acceder a todos los detalles de pago
CREATE POLICY "Admins can access all payment details" ON payment_details
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM users 
            WHERE users.id = auth.uid() 
            AND users.role = 'admin'
        )
    );

-- Política para que los usuarios solo puedan ver sus propios detalles de pago
CREATE POLICY "Users can view their own payment details" ON payment_details
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM orders 
            WHERE orders.id = payment_details.order_id 
            AND orders.user_id = auth.uid()
        )
    );

-- Comentarios para documentación
COMMENT ON TABLE payment_details IS 'Tabla para almacenar detalles específicos de cada transacción de pago';
COMMENT ON COLUMN payment_details.transaction_id IS 'ID único de la transacción proporcionado por el procesador de pagos';
COMMENT ON COLUMN payment_details.payment_method IS 'Método de pago utilizado';
COMMENT ON COLUMN payment_details.payment_data IS 'Datos adicionales del pago en formato JSON (códigos QR, números de boleto, etc.)';
COMMENT ON COLUMN payment_details.status IS 'Estado actual del pago';

-- Insertar datos de ejemplo para testing (opcional)
-- UNCOMMENT para agregar datos de prueba
/*
INSERT INTO payment_details (order_id, transaction_id, payment_method, payment_data, status) 
SELECT 
    o.id as order_id,
    'TEST_' || o.id || '_' || extract(epoch from now()) as transaction_id,
    'credit_card' as payment_method,
    jsonb_build_object(
        'authorization_code', 'AUTH' || o.id,
        'last_four_digits', '1234',
        'amount', o.total,
        'currency', 'BRL'
    ) as payment_data,
    CASE 
        WHEN o.payment_status = 'paid' THEN 'approved'
        WHEN o.payment_status = 'failed' THEN 'failed'
        ELSE 'pending'
    END as status
FROM orders o 
WHERE NOT EXISTS (
    SELECT 1 FROM payment_details pd WHERE pd.order_id = o.id
)
LIMIT 5;
*/

-- Verificar la estructura de las tablas
SELECT 
    table_name,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name IN ('orders', 'payment_details')
ORDER BY table_name, ordinal_position;
